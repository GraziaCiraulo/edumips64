INSTRUCTION SET EDUMIPS64
=========================

Guida veloce all'instruction set di EduMIPS64. Alcune descrizioni sono prese dal 
manuale MIPS64. Fateci sapere se questo e' un problema, e le rimuoveremo.


Istruzione ADD

Sintassi: ADD rd, rs, rt 
Descrizione: 
            Somma due interi a 32 bit. Lancia un'eccezione in caso di overflow.           
 
Istruzione ADDI 

Sintassi: ADDI rt, rs, immediate
Descrizione: 
            Somma una costante ad un intero a 32 bit. Lancia un'eccezione in caso di overflow.

Istruzione ADDIU 

Sintassi: ADDIU rt, rs, immediate
Descrizione: 
            Somma una costante ad un registro a 32 bit.
            L'immediato con segno e' sommato al valore a 32 bit del GPR rs,
            il risultato e' memorizzato nel registro rt.
            Non si verificano eccezioni di overflow.
			
Istruzione ADDU 

Sintassi: ADDU rd, rs, rt
Descrizione: rd = rs + rt
            Somma due interi a 32 bit.
            Il valore a 32 bit del GPR rt e' sommato al valore a 32 bit del registro rs, 
            il risultato e' memorizzato nel registro rd.
            Non si verificano eccezioni di overflow.
			
Istruzione AND 

Sintassi: AND rd, rs, rt 
Descrizione: rd = rs and rt
            Effettua un AND logico bit a bit tra il registro rs ed il registro rt.
            Mette il risultato nel registro rd.

Istruzione ANDI 

Sintassi: ANDI rt, rs, immediato
Descrizione: rt = rs AND immediato
            Effettua un AND logico bit a bit tra il registro rs ed un immediato.
            L'immediato a 16 bit "is zero-extended to the left" e successivamente
            viene effettuato l'AND bit a bit. Il risultato viene memorizzato nel 
            registro rt.

Istruzione B

Sintassi: B offset
Descrizione: Effettua un salto incondizionato ad offset
            
Istruzione BEQ 

Sintassi: BEQ rs, rt, offset
Descrizione: if rs = rt then branch
            Confronta i GPR rs ed rt ed effettua un salto condizionale.
            
Istruzione BEQZ 

Sintassi: BEQZ rs, offset
Descrizione: if rs == 0 then branch
            Verifica il valore di un GPR ed effettua un salto condizionale.

Istruzione BGEZ

Sintassi: BGEZ rs, offset
Descrizione: if rs >= 0 then branch
            Se rs >= 0, effettua un salto relativo al PC ad offset.
             
Istruzione BNE 

Sintassi: BNE rt, rs, offset
Descrizione: if rs != rt then branch
            Verifica il valore di un GPR ed effettua un salto condizionale.
            
Istruzione BNEZ 

Sintassi: BNEZ rs, offset
Descrizione: if rs != 0 then branch  
            Verifica il valore di un GPR ed effettua un salto condizionale.
            
Istruzione DADD 

Sintassi: DADD rd, rs, rt
Descrizione: 
            Somma due interi a 64 bit. Lancia un'eccezione in caso di overflow.
            
Istruzione DADDI 

Sintassi: DADDI rt, rs, immediate
Descrizione: 
            Somma una costante ad un intero a 64 bit. Lancia un'eccezione in caso di overflow.

Istruzione DADDU 

Sintassi: DADDU rd, rs, rt
Descrizione: rd = rs + rt
            Somma due interi a 64 bit.
            Il valore a 64 bit del GPR rt e' sommato al valore a 64 bit del registro rs, 
            il risultato e' memorizzato nel registro rd.
            Non si verificano eccezioni di overflow.
            
Istruzione DADDIU 

Sintassi: DADDIU rt, rs, immediate
Descrizione: 
            Somma una costante ad un registro a 64 bit.
            L'immediato con segno e' sommato al valore a 64 bit del GPR rs,
            il risultato e' memorizzato nel registro rt.
            Non si verificano eccezioni di overflow.

Istruzione DDIV 

Sintassi: DDIV rs, rt
Descrizione: (LO, HI) = rs / rt
            Effettua la divisione tra due interi a 64 bit.
            Divide il valore a 64 bit del registro rs con quello nel registro rt,
            considerando entrambi gli operandi come valori con segno.
            Il quoziente ed il resto a 64 bit sono memorizzati rispettivamente,
            nei registri speciali LO ed HI.
            Non si verificano eccezioni aritmetiche.

Istruzione DDIVU

Sintassi: DDIVU rs, rt
Descrizione: (LO, HI) = rs / rt
            Effettua la divisione tra due interi senza segno a 64 bit.
            Divide il valore a 64 bit del registro rs con quello nel registro rt,
            considerando entrambi gli operandi come valori senza segno.
            Il quoziente ed il resto a 64 bit sono memorizzati rispettivamente,
            nei registri speciali LO ed HI.
            Non si verificano eccezioni aritmetiche.
            
Istruzione DIV 

Sintassi: DIV rs, rt
Descrizione: (LO, HI) = rs / rt
            Effettua la divisione tra due interi a 32 bit.
            Divide il valore a 32 bit del registro rs con quello nel registro rt,
            considerando entrambi gli operandi come valori con segno.
            Il quoziente ed il resto a 32 bit sono memorizzati rispettivamente,
            nei registri speciali LO ed HI.
            Non si verificano eccezioni aritmetiche.
			
Istruzione DIVU

Sintassi: DIVU rs, rt
Descrizione: (LO, HI) = rs / rt
            Effettua la divisione tra due interi senza segno a 32 bit.
            Divide il valore a 32 bit del registro rs con quello nel registro rt,
            considerando entrambi gli operandi come valori senza segno.
            Il quoziente ed il resto a 32 bit sono memorizzati rispettivamente,
            nei registri speciali LO ed HI.
            Non si verificano eccezioni aritmetiche.
			
Istruzione DMULT 

Sintassi: DMULT rs, rt
Descrizione: (LO) = rs * rt
            Moltiplica due interi con segno a 64 bit.
            Il valore nel registro rt e' moltiplicato per il valore in rs,
            considerando entrambi gli operandi come valori con segno.

Istruzione DMULTU

Sintassi: DMULTU rs, rt
Descrizione: (LO) = rs * rt
            Moltiplica due interi senza segno a 64 bit.
            Il valore nel registro rt e' moltiplicato per il valore in rs.
           
Istruzione DSLL 

Sintassi: DSLL rd, rt, sa
Descrizione: 
            Effettua uno shift a sinistra del valore a 64 bit di un numero di 
            bit fisso che varia da 0 a 31.
            I valori a 64 bit sono shiftati a sinistra, inserendo degli zeri nei bit
            vuoti, il risultato e' memorizzato nel registro rd.
            Il numero di bit di cui shiftare il valore e' specificato dal registro sa.
            
Istruzione DSLLV 

Sintassi: DSLLV rd, rt, rs
Descrizione: 
            Effettua uno shift a sinistra di un valore a 64 bit di un numero variabile
            di bit. I 64 bit contenuti nel GPR rt vengono shiftati a sinistra del valore contenuto negli
            ultimi 6 bit in GPR rs (valore senza segno), inserendo degli zeri nei bit vuoti.
            Il risultato e' memorizzato nel registro rd.
            
Istruzione DSRA 

Format: DSRA rd, rt, sa
Descrizione: 
            Effettua uno shift aritmetico a destra di un numero fisso di bit, variabile tra 0 e 31, 
            del valore a 64 bit.
            
Istruzione DSRAV 

Format: DSRAV rd, rt, rs
Descrizione: rd = rt >> rs (arithmetic)
            Effettua uno shift aritmetico di un numero variabile di bit.
            Il valore a 64 bit contenuto nel GPR rt e' shiftato a destra del valore contenuto negli
            ultimi 6 bit in GPR rs (valore senza segno), duplicando il bit di segno (63) nei bit vuoti.
            Il risultato e' memorizzato nel registro rd.
            
Istruzione DSRL 

Sintassi: DSRL rd, rt, sa
Descrizione: 
            Effettua uno shift logico a destra di una doubleword per un numero fisso di bit
            da 0 a 31. Il valore a 64 bit contenuto nel GPR rt e' shiftato a destra inserendo degli
            zeri nei bit vuoti, il risultato e' memorizzato nel registro rd.
            
Istruzione DSRLV 

Sintassi:      DSRLV rd, rt, rs
Descrizione: 
            Effettua uno shift logico a destra di una doubleword per un numero variabile di bit.
            Il valore a 64 bit contenuto nel GPR rt e' shiftato a destra del valore contenuto negli
            ultimi 6 bit in GPR rs (valore senza segno), inserendo degli zeri nei bit vuoti.
            Il risultato e' memorizzato nel registro rd.
            
Istruzione DSUB 

Sintassi: DSUB rd, rs, rt
Descrizione: 
            Sottrae due interi a 64 bit. Se si verifica un overflow, lancia un'eccezione.
            Il valore a 64 bit del registro rt e' sottratto a quello contenuto nel registro rs,
            il risultato e' posto in rd.
            
Istruzione DSUBU 

Sintassi: DSUBU rd, rs, rt
Descrizione: 
            Sottrae due interi a 64 bit. 
            Il valore a 64 bit del registro rt e' sottratto a quello contenuto nel registro rs,
            il risultato e' posto in rd.
			Non si verificano eccezioni di overflow.

Istruzione HALT 

Sintassi:    HALT
Descrizione: 
            Termina l'esecuzione del programma.
            Quando un'istuzione HALT effettua lo stadio ID, notifica alla CPU
            che tutte le istruzioni della pipeline successive alla HALT devono
            essere ignorate.
Eccezioni:   HaltException

Istruzione J 

Sintassi: J target
Descrizione: 
            Salta entro la regione corrente allineata a 256 MB. 
            E' un salto PC-region (non PC-relative); l'effettivo
            indirizzo e' nella regione corrente allineata a 256 MB.
            
Istruzione JAL 

Sintassi: JAL target
Descrizione: 
            Esegue una chiamata di procedura all'interno della regione corrente
            allineata a 256 MB. Inserisce l'indirizzo di ritorno nel GPR 31. 
            E' un salto PC-region (non PC-relative).
            
Istruzione JALR 

Sintassi: JALR rs
Descrizione: 
            Esegue una chiamata di procedura all'indirizzo di un'istruzione contenuto
            in un registro. Inserisce l'indirizzo di ritorno nel GPR rd.
            
Istruzione JR 

Sintassi: JR rs
Descrizione: 
            Esegue un salto ad un indirizzo di un'istruzione contenuto in un registro.
            
Istruzione LB 

Sintassi: LB rt, offset(base)
Descrizione: rt = memory[base+offset]
            Carica un byte dalla memoria come valore con segno.
            
Istruzione LBU 

Sintassi: LBU rt, offset(base)
Descrizione: rt = memory[base+offset]
            Carica un byte dalla memoria come valore con segno.
            
Istruzione LD 

Sintassi: LD rt, offset(base)
Descrizione: rt = memory[base+offset]
            Carica una doubleword dalla memoria.
            
Sintassi: LH rt, offset(base)
Descrizione: rt = memory[base+offset]
            Carica una halfword dalla memoria come valore con segno.
            
Istruzione LHU 

Sintassi: LHU rt, offset(base)
Descrizione:  rt = memory[base+offset]    
            Carica una halfword dalla memoria come valore senza segno.
            
Istruzione LUI 

Format: LUI rt, immediate
Descrizione:   
            L'immediato a 16 bit e' shiftato a sinistra di 16 bit e concatenato
            con zeri nei 16 bit meno significativi.
            
Istruzione LW 

Format: LW rt, offset(base)
Descrizione:   rt = memory[base+offset]
            Carica una word dalla memoria come valore con segno.

Istruzione LWU 

Sintassi: LWU rt, offset(base)
Descrizione:   rt = memory[base+offset]
            Carica una word dalla memoria come valore senza segno.

Istruzione MFHI 

Sintassi: MFHI rd
Descrizione: rd = HI
            Copia il registro speciale HI nel GPR rd.
            
Istruzione MFLO 

Sintassi: MFLO rd
Descrizione: rd = LO
            Copia il registro speciale HI nel GPR rd.
            
Istruzione MOVN 

Sintassi: MOVN rd, rs, rt  
Descrizione: if rt != 0 then rd = rs
            Se il valore del registro rt non e' uguale a zero il contenuto 
            viene copiato nel registro rd.
            
Istruzione MOVZ 

Sintassi: MOVZ rd, rs, rt
Descrizione: if rt = 0 then rd = rs
            Se il valore del registro rt non e' uguale a zero il contenuto 
            viene copiato nel registro rd.
            
Istruzione MULT 

Sintassi: MULT rs, rt
Descrizione: (LO) = rs * rt
            Moltiplica due interi con segno a 32 bit.
            Il valore nel registro rt e' moltiplicato per il valore in rs,
            considerando entrambi gli operandi come valori con segno.
			
Istruzione MULTU

Sintassi: MULTU rs, rt
Descrizione: (LO) = rs * rt
            Moltiplica due interi senza segno a 32 bit.
            Il valore nel registro rt e' moltiplicato per il valore in rs.

Istruzione NOP 

Sintassi: NOP
Descrizione:
            Crea spazi vuoti nella pipeline.

Istruzione OR 

Sintassi: OR rd, rs, rt
Descrizione: rd = rs or rt 
            Effettua un OR logico bit a bit.
            L'operazione di OR logico bit a bit e' effettuata tra il valore
            contenuto nel registro rs e quello contenuto nel registro rt.
            
Istruzione ORI 

Sintassi: ORI rt, rs, immediate
Descrizione:   
            Effettua un OR logico bit a bit con una costante.

Istruzione SB 

Sintassi: SB rt, offset(base)
Descrizione: memory[base+offset] = rt
            Memorizza gli 8 bit meno significativi di rt in memoria.
            
Istruzione SD 

Sintassi: SD rt, offset(base)
Descrizione: memory[base+offset] = rt
            Memorizza la doubleword contenuta in rt in memoria.
            
Istruzione SH 

Sintassi: SH rt, offset(base)
Descrizione: memory[base+offset] = rt
            Memorizza l'halfword contenuta in rt in memoria.

Istruzione SLL 

Sintassi: SLL rd, rt, sa
Descrizione: 
            Effettua uno shift a sinistra del valore a 32 bit di un numero di 
            bit fisso che varia da 0 a 31.
            I valori a 32 bit sono shiftati a sinistra, inserendo degli zeri nei bit
            vuoti, il risultato e' memorizzato nel registro rd.
            Il numero di bit di cui shiftare il valore e' specificato dal registro sa.
			
Istruzione SLLV 

Sintassi: SLLV rd, rt, rs
Descrizione: 
            Effettua uno shift a sinistra di un valore a 32 bit di un numero variabile
            di bit. I 32 bit contenuti nel GPR rt vengono shiftati a sinistra del valore contenuto negli
            ultimi 5 bit in GPR rs (valore senza segno), inserendo degli zeri nei bit vuoti.
            Il risultato e' memorizzato nel registro rd.
			
Istruzione SLT

Sintassi: SLT rd, rs, rt
Descrizione: 
            Memorizza il risultato del confronto rs<rt nel GPR rd.
            Non si verifica alcuna eccezione di overflow.
            
Istruzione SLTI

Sintassi: SLTI rd, rs, immediate
Descrizione: 
            Memorizza il risultato del confronto di minoranza tra il registro rs 
            ed una costante. Pone il risultato nel registro rt.
            Se il registro rs contiene un valore minore dell'immediato, rt viene
            posto ad 1 (true), altrimenti viene posto a 0 (false).   
			
Istruzione SLTIU 

Sintassi: SLTIU rt, rs, immediate
Descrizione: 
            Memorizza il risultato del confronto di minoranza tra il registro rs 
            ed una costante senza segno. Pone il risultato nel registro rt.
            Se il registro rs contiene un valore minore dell'immediato, rt viene
            posto ad 1 (true), altrimenti viene posto a 0 (false).            
        
Istruzione SLTU

Sintassi: SLTU rd, rs, rt
Descrizione: 
            Memorizza il risultato del confronto senza segno rs<rt nel GPR rd.
            Non si verifica alcuna eccezione di overflow.			
			
Istruzione SRA 

Format: SRA rd, rt, sa
Descrizione: 
            Effettua uno shift aritmetico a destra di un numero fisso di bit, variabile tra 0 e 31, 
            del valore a 32 bit.
			
Istruzione SRAV 

Format: SRAV rd, rt, rs
Descrizione: rd = rt >> rs (arithmetic)
            Effettua uno shift aritmetico di un numero variabile di bit.
            Il valore a 32 bit contenuto nel GPR rt e' shiftato a destra del valore contenuto negli
            ultimi 5 bit in GPR rs (valore senza segno), duplicando il bit di segno (31) nei bit vuoti.
            Il risultato e' memorizzato nel registro rd.
			
Istruzione SRL 

Sintassi: SRL rd, rt, sa
Descrizione: 
            Effettua uno shift logico a destra di una word32 per un numero fisso di bit
            da 0 a 31. Il valore a 32 bit contenuto nel GPR rt e' shiftato a destra inserendo degli
            zeri nei bit vuoti, il risultato e' memorizzato nel registro rd.
			
Istruzione SRLV 

Sintassi: SRLV rd, rt, rs
Descrizione: 
            Effettua uno shift logico a destra di una word32 per un numero variabile di bit.
            Il valore a 32 bit contenuto nel GPR rt e' shiftato a destra del valore contenuto negli
            ultimi 5 bit in GPR rs (valore senza segno), inserendo degli zeri nei bit vuoti.
            Il risultato e' memorizzato nel registro rd.
			
Istruzione SUB 

Sintassi: SUB rd, rs, rt
Descrizione: 
            Sottrae due interi a 32 bit. Se si verifica un overflow, lancia un'eccezione.
            Il valore a 32 bit del registro rt e' sottratto a quello contenuto nel registro rs,
            il risultato e' posto in rd.
            
Istruzione SUBU 

Sintassi: SUBU rd, rs, rt
Descrizione: 
            Sottrae due interi a 32 bit.
            Il valore a 32 bit del registro rt e' sottratto a quello contenuto nel registro rs,
            il risultato e' posto in rd.
			Non si verificano eccezioni di overflow.
			
Istruzione SW 

Sintassi: SW rt, offset(base)
Descrizione: rt = memory[base+offset]
            Memorizza in memoria un byte, aggiungengo l'offset con segno 
            all'indirizzo base per formare l'indirizzo finale.
            
Istruzione XOR 

Sintassi: XOR rd, rs, rt
Descrizione: rd = rs XOR rt
            Effettua l'OR esclusivo tra i valori contenuti nei registri rs ed rt.
            
Istruzione XORI 

Sintassi: XORI rt, rs, immediate
Descrizione: rt = rs XOR immediate
             Effettua l'OR esclusivo con una costante.

---------------------------------------------------------------------------------
                    ISTRUZIONI FLOATING POINT
---------------------------------------------------------------------------------            
-Istruzione ADD.D
Sintassi: ADD.D fd, fs, ft
Descrizione:fd = fs + ft
            Effettua la somma di due valori double floating point
Eccezioni:  Overflow e Underflow vengono generate se il risultato non può essere 
            rappresentato secondo lo standard IEEE754
            Invalid Operation è generata se fs o ft contiene QNaN o SNaN, 
            o se viene eseguita un'operazione non valida (i.e +infinito-infinito)


-Istruzione BC1F
Sintassi: BC1F cc, offset
Descrizione: if FCSR[cc] = 0 then branch
            Testa una condizione cc ed effettua un salto PC-relative
            Il valore booleano FCSR[cc] può essere scritto solo dalle istruzioni
            C.condition.format
            (es.  C.EQ.D 7,f1,f2 --->  NOP ---> BC1T 7,label)


-Istruzione BC1T 
Sintassi: BC1T cc, offset
Descrizione: if FCSR[cc] = 1 then branch
            Testa una condizione cc ed effettua un salto PC-relative
            Il valore booleano FCSR[cc] può essere scritto solo dalle istruzioni
            C.condition.format
            (es.  C.EQ.D 7,f1,f2 --->  NOP ---> BC1T 7,label)


-Istruzione C.EQ.D 
Sintassi: C.EQ.D cc, fs, ft
Descrizione: FCSR[cc] = (fs==ft)
            Verifica il predicato "uguale a" tra i due registri fs ed ft e 
            salva il risultato in FCSR[cc]. Il risultato viene scritto nello stadio EX,
            per cui si deve porre una nop immediatamente dopo questa istruzione
            se si vuole testare il valore scritto in FCSR[cc] con un'istruzione di salto.
            (es.  C.EQ.D 7,f1,f2 --->  NOP ---> BC1T 7,label)
            cc è un immediato a 3 bit del range [0,7]
Eccezioni: Invalid Operation  è lanciata quando fs o ft contengono valori QNaN 
            (se attiva si ha una trap)  o SNaN(si ha sempre una trap)  
            

-Istruzione C.LT.D 
Sintassi: C.LT.D cc, fs, ft
Descrizione: FCSR[cc]=(fs<ft)
            Verifica il predicato "minore di" tra i due registri fs ed ft e salva 
            il risultato in FCSR[cc]. Il risultato viene scritto nello stadio EX,
            per cui si deve porre una nop immediatamente dopo questa istruzione
            se si vuole testare il valore scritto in FCSR[cc] con un'istruazione di salto.
            (es.  C.LT.D 7,f1,f2 --->  NOP ---> BC1T 7,label)
            cc è un immediato a 3 bit del range [0,7]
Eccezioni: Invalid Operation  è lanciata quando fs o ft contengono valori QNaN 
            (se attiva si ha una trap)  o SNaN(si ha sempre una trap)  


-Istruzione CVT.D.L 
Sintassi: CVT.D.L fd, fs
Descrizione: fd = convert(fs)
            Converte un long in un double
Eccezioni: Invalid Operation è lanciata quando fs contiene QNaN,SNaN o Infinito


-CVT.W.D Istruzione
Sintassi: CVT.D.W fd, fs
Descrizione: fd = convert(fs)
            Converte un int in un double
Eccezioni: Invalid Operation è lanciata quando fs contiene QNaN,SNaN or Infinity values            


-Istruzione CVT.L.D 
Sintassi: CVT.L.D fd, fs
Descrizione: fd = convert_and_round(fs, CurrentRoundingMode)
            Converte un double in un long
            La modalità di arrotondamento corrente si cambia dalla scheda Configure/Settings/FPURound 
Eccezioni: Invalid Operation è lanciata quando fs è Infinito, XNaN, o 
            il risultato è fuori dal range -2^63 a 2^63 -1 (long)
            

-Istruzione CVT.W.D 
Sintassi: CVT.W.D fd, fs
Descrizione: fd = convert_and_round(fs, CurrentRoundingMode)
            Converte un double in un int
            La modalità di arrotondamento corrente si cambia dalla scheda Configure/Settings/FPURound 
Eccezioni:  Invalid Operation è lanciata quando fs è Infinito, XNaN, o 
            il risultato è fuori dal range -2^31 a 2^31 -1 (int)
            
            
-Istruzione DIV.D 
Sintassi: DIV.D fd, fs, ft
Descrizione: fd = fs / ft
            Divide valori floating point double
Eccezioni: Overflow and Underflow vengono generati se il risultato non può essere
            rappresentato secondo lo standard IEEE754
            Invalid Operation viene generata se fs o ft contengono QNaN or SNaN
            o viene eseguita un'operazione non valida (es. 0/0)            
            Divide by zero è generata se è eseguita una divisione per zero
            

-Istruzione DMFC1 
Sintassi: DMFC1 rt,fs
Descrizione: ft = fs
            Sposta una double word da un FPR a un GPR
            

-Istruzione DMTC1 
Sintassi: DMTC1 rt, fs
Descrizione: fs = rt
            Copia una doubleword da un GPR ad un FPR
            

-Istruzione L.D  (Obsoleta: Si deve usare LDC1)
Sintassi: L.D ft, offset(base)
Descrizione:ft = memory[base+offset]
            Carica una double word dalla memoria all'FPR


-Istruzione LDC1 
Sintassi: LDC1 ft, offset(base)
Descrizione: ft = memory[base+offset]
            Carica una double word dalla memoria all'FPR


-Istruzione LWC1 
Sintassi: LWC1 ft, offset(base)
Descrizione: ft= memory[base + offset]
             Carica una  word dalla memoria all'FPR


-Istruzione MFC1 
Sintassi: MFC1 rt, fs
Descrizione: rt = readword(fs)
            Copia una word da un GPR ad un FPR


-Istruzione MOVF.D 
Sintassi: MOVF.D fd, fs, cc
Descrizione: if FCSR[cc] = 0 then fd=fs
            Testa il booleano FCSR[cc] e sposta un valore FP

            
-Istruzione MOVT.D 
Sintassi: MOVT.D fd, fs, cc
Descrizione: if FCSR[cc] = 1 then fd=fs
            Testa il booleano FCSR[cc] e sposta un valore FP
            
            
-Istruzione MOV.D 
Sintassi: MOV.D fd, fs
Descrizione: fd = fs
            Sposta valori tra FPRs


-Istruzione MOVN.D 
Sintassi: MOVN.D fd, fs, rt
Descrizione: if rt != 0 then fd=fs
            Testa un GPR e sposta valori tra FPRs


-Istruzione MOVZ.D 
Sintassi: MOVZ.D fd, fs, rt
Descrizione: if rt = 0 then fd=fs
            Testa un GPR e sposta valori tra FPRs


-Istruzione MTC1 
Sintassi: MTC1 rt, fs
Descrizione: fs = rt(31..0)
            Copia una word da un GPR a un FPR
            La word più bassa del GPR è posta nella word più bassa dell'FPR


-Istruzione MUL.D 
Sintassi: MUL.D fd, fs, ft
Descrizione: fd = fs * ft
            Moltiplica valori double
Eccezioni: Overflow and Underflow vengono generati se il risultato non può essere
            rappresentato secondo lo standard IEEE754
            Invalid Operation è generato se fs o ft contiene  QNaN o SNaN, 
            o se si effettua un'operazione non valida (es. Infinito*0)    


-Istruzione S.D  (OBSOLETA: Si deve usare SDC1)
Sintassi: S.D ft, offset(base)
Descrizione: memory[base+ offset] = ft
           Per memorizzare una double word da un FPR alla memoria


-Istruzione SDC1 
Sintassi: SDC1 ft, offset(base)
Descrizione:memory[base+ offset] =ft 
            Per memorizzare una double word da un FPR alla memoria


-Istruzione SUB.D 
Sintassi: SUB.D fd, fs, ft
Descrizione:
           Per sottrarre valori FP
Eccezioni: Overflow and Underflow avengono generati se il risultato non può essere
            rappresentato secondo lo standard IEEE754
            Invalid Operation è generata se fs o ft contengono
             QNaN o SNaN, o se viene eseguita un'operazione non valida
             (es. +Infinito -  +Infinito) 


-Istruzione SWC1 
Sintassi: SWC1 ft, offset(base)
Descrizione: memory[base + offset] =ft
            Memorizza una word da un FPR alla memoria. La word più bassa dell'FPR 
             è salvata in memoria.           
